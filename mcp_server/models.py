# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:20:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, RootModel, confloat, conint


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[str]):
    root: str


class AccountIds(RootModel[List[AccountId]]):
    root: List[AccountId]


class AutoScalingConfiguration(Enum):
    TargetTrackingScalingCpu = 'TargetTrackingScalingCpu'
    TargetTrackingScalingMemory = 'TargetTrackingScalingMemory'


class AutoScalingGroupArn(RootModel[str]):
    root: str


class AutoScalingGroupArns(RootModel[List[AutoScalingGroupArn]]):
    root: List[AutoScalingGroupArn]


class AutoScalingGroupName(RootModel[str]):
    root: str


class Code(RootModel[str]):
    root: str


class ContainerName(RootModel[str]):
    root: str


class CpuSize(RootModel[int]):
    root: int


class CpuVendorArchitecture(Enum):
    AWS_ARM64 = 'AWS_ARM64'
    CURRENT = 'CURRENT'


class CpuVendorArchitectures(RootModel[List[CpuVendorArchitecture]]):
    root: List[CpuVendorArchitecture]


class CreationTimestamp(RootModel[datetime]):
    root: datetime


class Currency(Enum):
    USD = 'USD'
    CNY = 'CNY'


class CurrentInstanceType(RootModel[str]):
    root: str


class CurrentPerformanceRisk(Enum):
    VeryLow = 'VeryLow'
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class DeleteRecommendationPreferencesResponse(BaseModel):
    pass


class DesiredCapacity(RootModel[int]):
    root: int


class DestinationBucket(RootModel[str]):
    root: str


class DestinationKey(RootModel[str]):
    root: str


class DestinationKeyPrefix(RootModel[str]):
    root: str


class EBSFilterName(Enum):
    Finding = 'Finding'


class EBSFinding(Enum):
    Optimized = 'Optimized'
    NotOptimized = 'NotOptimized'


class EBSMetricName(Enum):
    VolumeReadOpsPerSecond = 'VolumeReadOpsPerSecond'
    VolumeWriteOpsPerSecond = 'VolumeWriteOpsPerSecond'
    VolumeReadBytesPerSecond = 'VolumeReadBytesPerSecond'
    VolumeWriteBytesPerSecond = 'VolumeWriteBytesPerSecond'


class ECSServiceLaunchType(Enum):
    EC2 = 'EC2'
    Fargate = 'Fargate'


class ECSServiceMetricName(Enum):
    Cpu = 'Cpu'
    Memory = 'Memory'


class ECSServiceMetricStatistic(Enum):
    Maximum = 'Maximum'
    Average = 'Average'


class ECSServiceRecommendationFilterName(Enum):
    Finding = 'Finding'
    FindingReasonCode = 'FindingReasonCode'


class ECSServiceRecommendationFinding(Enum):
    Optimized = 'Optimized'
    Underprovisioned = 'Underprovisioned'
    Overprovisioned = 'Overprovisioned'


class ECSServiceRecommendationFindingReasonCode(Enum):
    MemoryOverprovisioned = 'MemoryOverprovisioned'
    MemoryUnderprovisioned = 'MemoryUnderprovisioned'
    CPUOverprovisioned = 'CPUOverprovisioned'
    CPUUnderprovisioned = 'CPUUnderprovisioned'


class ECSServiceRecommendationFindingReasonCodes(
    RootModel[List[ECSServiceRecommendationFindingReasonCode]]
):
    root: List[ECSServiceRecommendationFindingReasonCode]


class EnhancedInfrastructureMetrics(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class EnrollmentFilterName(Enum):
    Status = 'Status'


class ExportableAutoScalingGroupField(Enum):
    AccountId = 'AccountId'
    AutoScalingGroupArn = 'AutoScalingGroupArn'
    AutoScalingGroupName = 'AutoScalingGroupName'
    Finding = 'Finding'
    UtilizationMetricsCpuMaximum = 'UtilizationMetricsCpuMaximum'
    UtilizationMetricsMemoryMaximum = 'UtilizationMetricsMemoryMaximum'
    UtilizationMetricsEbsReadOpsPerSecondMaximum = (
        'UtilizationMetricsEbsReadOpsPerSecondMaximum'
    )
    UtilizationMetricsEbsWriteOpsPerSecondMaximum = (
        'UtilizationMetricsEbsWriteOpsPerSecondMaximum'
    )
    UtilizationMetricsEbsReadBytesPerSecondMaximum = (
        'UtilizationMetricsEbsReadBytesPerSecondMaximum'
    )
    UtilizationMetricsEbsWriteBytesPerSecondMaximum = (
        'UtilizationMetricsEbsWriteBytesPerSecondMaximum'
    )
    UtilizationMetricsDiskReadOpsPerSecondMaximum = (
        'UtilizationMetricsDiskReadOpsPerSecondMaximum'
    )
    UtilizationMetricsDiskWriteOpsPerSecondMaximum = (
        'UtilizationMetricsDiskWriteOpsPerSecondMaximum'
    )
    UtilizationMetricsDiskReadBytesPerSecondMaximum = (
        'UtilizationMetricsDiskReadBytesPerSecondMaximum'
    )
    UtilizationMetricsDiskWriteBytesPerSecondMaximum = (
        'UtilizationMetricsDiskWriteBytesPerSecondMaximum'
    )
    UtilizationMetricsNetworkInBytesPerSecondMaximum = (
        'UtilizationMetricsNetworkInBytesPerSecondMaximum'
    )
    UtilizationMetricsNetworkOutBytesPerSecondMaximum = (
        'UtilizationMetricsNetworkOutBytesPerSecondMaximum'
    )
    UtilizationMetricsNetworkPacketsInPerSecondMaximum = (
        'UtilizationMetricsNetworkPacketsInPerSecondMaximum'
    )
    UtilizationMetricsNetworkPacketsOutPerSecondMaximum = (
        'UtilizationMetricsNetworkPacketsOutPerSecondMaximum'
    )
    LookbackPeriodInDays = 'LookbackPeriodInDays'
    CurrentConfigurationInstanceType = 'CurrentConfigurationInstanceType'
    CurrentConfigurationDesiredCapacity = 'CurrentConfigurationDesiredCapacity'
    CurrentConfigurationMinSize = 'CurrentConfigurationMinSize'
    CurrentConfigurationMaxSize = 'CurrentConfigurationMaxSize'
    CurrentOnDemandPrice = 'CurrentOnDemandPrice'
    CurrentStandardOneYearNoUpfrontReservedPrice = (
        'CurrentStandardOneYearNoUpfrontReservedPrice'
    )
    CurrentStandardThreeYearNoUpfrontReservedPrice = (
        'CurrentStandardThreeYearNoUpfrontReservedPrice'
    )
    CurrentVCpus = 'CurrentVCpus'
    CurrentMemory = 'CurrentMemory'
    CurrentStorage = 'CurrentStorage'
    CurrentNetwork = 'CurrentNetwork'
    RecommendationOptionsConfigurationInstanceType = (
        'RecommendationOptionsConfigurationInstanceType'
    )
    RecommendationOptionsConfigurationDesiredCapacity = (
        'RecommendationOptionsConfigurationDesiredCapacity'
    )
    RecommendationOptionsConfigurationMinSize = (
        'RecommendationOptionsConfigurationMinSize'
    )
    RecommendationOptionsConfigurationMaxSize = (
        'RecommendationOptionsConfigurationMaxSize'
    )
    RecommendationOptionsProjectedUtilizationMetricsCpuMaximum = (
        'RecommendationOptionsProjectedUtilizationMetricsCpuMaximum'
    )
    RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum = (
        'RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum'
    )
    RecommendationOptionsPerformanceRisk = 'RecommendationOptionsPerformanceRisk'
    RecommendationOptionsOnDemandPrice = 'RecommendationOptionsOnDemandPrice'
    RecommendationOptionsStandardOneYearNoUpfrontReservedPrice = (
        'RecommendationOptionsStandardOneYearNoUpfrontReservedPrice'
    )
    RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice = (
        'RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice'
    )
    RecommendationOptionsVcpus = 'RecommendationOptionsVcpus'
    RecommendationOptionsMemory = 'RecommendationOptionsMemory'
    RecommendationOptionsStorage = 'RecommendationOptionsStorage'
    RecommendationOptionsNetwork = 'RecommendationOptionsNetwork'
    LastRefreshTimestamp = 'LastRefreshTimestamp'
    CurrentPerformanceRisk = 'CurrentPerformanceRisk'
    RecommendationOptionsSavingsOpportunityPercentage = (
        'RecommendationOptionsSavingsOpportunityPercentage'
    )
    RecommendationOptionsEstimatedMonthlySavingsCurrency = (
        'RecommendationOptionsEstimatedMonthlySavingsCurrency'
    )
    RecommendationOptionsEstimatedMonthlySavingsValue = (
        'RecommendationOptionsEstimatedMonthlySavingsValue'
    )
    EffectiveRecommendationPreferencesCpuVendorArchitectures = (
        'EffectiveRecommendationPreferencesCpuVendorArchitectures'
    )
    EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics = (
        'EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics'
    )
    EffectiveRecommendationPreferencesInferredWorkloadTypes = (
        'EffectiveRecommendationPreferencesInferredWorkloadTypes'
    )
    InferredWorkloadTypes = 'InferredWorkloadTypes'
    RecommendationOptionsMigrationEffort = 'RecommendationOptionsMigrationEffort'


class ExportableAutoScalingGroupFields(
    RootModel[List[ExportableAutoScalingGroupField]]
):
    root: List[ExportableAutoScalingGroupField]


class ExportableECSServiceField(Enum):
    AccountId = 'AccountId'
    ServiceArn = 'ServiceArn'
    LookbackPeriodInDays = 'LookbackPeriodInDays'
    LastRefreshTimestamp = 'LastRefreshTimestamp'
    LaunchType = 'LaunchType'
    CurrentPerformanceRisk = 'CurrentPerformanceRisk'
    CurrentServiceConfigurationMemory = 'CurrentServiceConfigurationMemory'
    CurrentServiceConfigurationCpu = 'CurrentServiceConfigurationCpu'
    CurrentServiceConfigurationTaskDefinitionArn = (
        'CurrentServiceConfigurationTaskDefinitionArn'
    )
    CurrentServiceConfigurationAutoScalingConfiguration = (
        'CurrentServiceConfigurationAutoScalingConfiguration'
    )
    CurrentServiceContainerConfigurations = 'CurrentServiceContainerConfigurations'
    UtilizationMetricsCpuMaximum = 'UtilizationMetricsCpuMaximum'
    UtilizationMetricsMemoryMaximum = 'UtilizationMetricsMemoryMaximum'
    Finding = 'Finding'
    FindingReasonCodes = 'FindingReasonCodes'
    RecommendationOptionsMemory = 'RecommendationOptionsMemory'
    RecommendationOptionsCpu = 'RecommendationOptionsCpu'
    RecommendationOptionsSavingsOpportunityPercentage = (
        'RecommendationOptionsSavingsOpportunityPercentage'
    )
    RecommendationOptionsEstimatedMonthlySavingsCurrency = (
        'RecommendationOptionsEstimatedMonthlySavingsCurrency'
    )
    RecommendationOptionsEstimatedMonthlySavingsValue = (
        'RecommendationOptionsEstimatedMonthlySavingsValue'
    )
    RecommendationOptionsContainerRecommendations = (
        'RecommendationOptionsContainerRecommendations'
    )
    RecommendationOptionsProjectedUtilizationMetricsCpuMaximum = (
        'RecommendationOptionsProjectedUtilizationMetricsCpuMaximum'
    )
    RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum = (
        'RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum'
    )


class ExportableECSServiceFields(RootModel[List[ExportableECSServiceField]]):
    root: List[ExportableECSServiceField]


class ExportableInstanceField(Enum):
    AccountId = 'AccountId'
    InstanceArn = 'InstanceArn'
    InstanceName = 'InstanceName'
    Finding = 'Finding'
    FindingReasonCodes = 'FindingReasonCodes'
    LookbackPeriodInDays = 'LookbackPeriodInDays'
    CurrentInstanceType = 'CurrentInstanceType'
    UtilizationMetricsCpuMaximum = 'UtilizationMetricsCpuMaximum'
    UtilizationMetricsMemoryMaximum = 'UtilizationMetricsMemoryMaximum'
    UtilizationMetricsEbsReadOpsPerSecondMaximum = (
        'UtilizationMetricsEbsReadOpsPerSecondMaximum'
    )
    UtilizationMetricsEbsWriteOpsPerSecondMaximum = (
        'UtilizationMetricsEbsWriteOpsPerSecondMaximum'
    )
    UtilizationMetricsEbsReadBytesPerSecondMaximum = (
        'UtilizationMetricsEbsReadBytesPerSecondMaximum'
    )
    UtilizationMetricsEbsWriteBytesPerSecondMaximum = (
        'UtilizationMetricsEbsWriteBytesPerSecondMaximum'
    )
    UtilizationMetricsDiskReadOpsPerSecondMaximum = (
        'UtilizationMetricsDiskReadOpsPerSecondMaximum'
    )
    UtilizationMetricsDiskWriteOpsPerSecondMaximum = (
        'UtilizationMetricsDiskWriteOpsPerSecondMaximum'
    )
    UtilizationMetricsDiskReadBytesPerSecondMaximum = (
        'UtilizationMetricsDiskReadBytesPerSecondMaximum'
    )
    UtilizationMetricsDiskWriteBytesPerSecondMaximum = (
        'UtilizationMetricsDiskWriteBytesPerSecondMaximum'
    )
    UtilizationMetricsNetworkInBytesPerSecondMaximum = (
        'UtilizationMetricsNetworkInBytesPerSecondMaximum'
    )
    UtilizationMetricsNetworkOutBytesPerSecondMaximum = (
        'UtilizationMetricsNetworkOutBytesPerSecondMaximum'
    )
    UtilizationMetricsNetworkPacketsInPerSecondMaximum = (
        'UtilizationMetricsNetworkPacketsInPerSecondMaximum'
    )
    UtilizationMetricsNetworkPacketsOutPerSecondMaximum = (
        'UtilizationMetricsNetworkPacketsOutPerSecondMaximum'
    )
    CurrentOnDemandPrice = 'CurrentOnDemandPrice'
    CurrentStandardOneYearNoUpfrontReservedPrice = (
        'CurrentStandardOneYearNoUpfrontReservedPrice'
    )
    CurrentStandardThreeYearNoUpfrontReservedPrice = (
        'CurrentStandardThreeYearNoUpfrontReservedPrice'
    )
    CurrentVCpus = 'CurrentVCpus'
    CurrentMemory = 'CurrentMemory'
    CurrentStorage = 'CurrentStorage'
    CurrentNetwork = 'CurrentNetwork'
    RecommendationOptionsInstanceType = 'RecommendationOptionsInstanceType'
    RecommendationOptionsProjectedUtilizationMetricsCpuMaximum = (
        'RecommendationOptionsProjectedUtilizationMetricsCpuMaximum'
    )
    RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum = (
        'RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum'
    )
    RecommendationOptionsPlatformDifferences = (
        'RecommendationOptionsPlatformDifferences'
    )
    RecommendationOptionsPerformanceRisk = 'RecommendationOptionsPerformanceRisk'
    RecommendationOptionsVcpus = 'RecommendationOptionsVcpus'
    RecommendationOptionsMemory = 'RecommendationOptionsMemory'
    RecommendationOptionsStorage = 'RecommendationOptionsStorage'
    RecommendationOptionsNetwork = 'RecommendationOptionsNetwork'
    RecommendationOptionsOnDemandPrice = 'RecommendationOptionsOnDemandPrice'
    RecommendationOptionsStandardOneYearNoUpfrontReservedPrice = (
        'RecommendationOptionsStandardOneYearNoUpfrontReservedPrice'
    )
    RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice = (
        'RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice'
    )
    RecommendationsSourcesRecommendationSourceArn = (
        'RecommendationsSourcesRecommendationSourceArn'
    )
    RecommendationsSourcesRecommendationSourceType = (
        'RecommendationsSourcesRecommendationSourceType'
    )
    LastRefreshTimestamp = 'LastRefreshTimestamp'
    CurrentPerformanceRisk = 'CurrentPerformanceRisk'
    RecommendationOptionsSavingsOpportunityPercentage = (
        'RecommendationOptionsSavingsOpportunityPercentage'
    )
    RecommendationOptionsEstimatedMonthlySavingsCurrency = (
        'RecommendationOptionsEstimatedMonthlySavingsCurrency'
    )
    RecommendationOptionsEstimatedMonthlySavingsValue = (
        'RecommendationOptionsEstimatedMonthlySavingsValue'
    )
    EffectiveRecommendationPreferencesCpuVendorArchitectures = (
        'EffectiveRecommendationPreferencesCpuVendorArchitectures'
    )
    EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics = (
        'EffectiveRecommendationPreferencesEnhancedInfrastructureMetrics'
    )
    EffectiveRecommendationPreferencesInferredWorkloadTypes = (
        'EffectiveRecommendationPreferencesInferredWorkloadTypes'
    )
    InferredWorkloadTypes = 'InferredWorkloadTypes'
    RecommendationOptionsMigrationEffort = 'RecommendationOptionsMigrationEffort'
    EffectiveRecommendationPreferencesExternalMetricsSource = (
        'EffectiveRecommendationPreferencesExternalMetricsSource'
    )
    InstanceState = 'InstanceState'


class ExportableInstanceFields(RootModel[List[ExportableInstanceField]]):
    root: List[ExportableInstanceField]


class ExportableLambdaFunctionField(Enum):
    AccountId = 'AccountId'
    FunctionArn = 'FunctionArn'
    FunctionVersion = 'FunctionVersion'
    Finding = 'Finding'
    FindingReasonCodes = 'FindingReasonCodes'
    NumberOfInvocations = 'NumberOfInvocations'
    UtilizationMetricsDurationMaximum = 'UtilizationMetricsDurationMaximum'
    UtilizationMetricsDurationAverage = 'UtilizationMetricsDurationAverage'
    UtilizationMetricsMemoryMaximum = 'UtilizationMetricsMemoryMaximum'
    UtilizationMetricsMemoryAverage = 'UtilizationMetricsMemoryAverage'
    LookbackPeriodInDays = 'LookbackPeriodInDays'
    CurrentConfigurationMemorySize = 'CurrentConfigurationMemorySize'
    CurrentConfigurationTimeout = 'CurrentConfigurationTimeout'
    CurrentCostTotal = 'CurrentCostTotal'
    CurrentCostAverage = 'CurrentCostAverage'
    RecommendationOptionsConfigurationMemorySize = (
        'RecommendationOptionsConfigurationMemorySize'
    )
    RecommendationOptionsCostLow = 'RecommendationOptionsCostLow'
    RecommendationOptionsCostHigh = 'RecommendationOptionsCostHigh'
    RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound = (
        'RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound'
    )
    RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound = (
        'RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound'
    )
    RecommendationOptionsProjectedUtilizationMetricsDurationExpected = (
        'RecommendationOptionsProjectedUtilizationMetricsDurationExpected'
    )
    LastRefreshTimestamp = 'LastRefreshTimestamp'
    CurrentPerformanceRisk = 'CurrentPerformanceRisk'
    RecommendationOptionsSavingsOpportunityPercentage = (
        'RecommendationOptionsSavingsOpportunityPercentage'
    )
    RecommendationOptionsEstimatedMonthlySavingsCurrency = (
        'RecommendationOptionsEstimatedMonthlySavingsCurrency'
    )
    RecommendationOptionsEstimatedMonthlySavingsValue = (
        'RecommendationOptionsEstimatedMonthlySavingsValue'
    )


class ExportableLambdaFunctionFields(RootModel[List[ExportableLambdaFunctionField]]):
    root: List[ExportableLambdaFunctionField]


class ExportableVolumeField(Enum):
    AccountId = 'AccountId'
    VolumeArn = 'VolumeArn'
    Finding = 'Finding'
    UtilizationMetricsVolumeReadOpsPerSecondMaximum = (
        'UtilizationMetricsVolumeReadOpsPerSecondMaximum'
    )
    UtilizationMetricsVolumeWriteOpsPerSecondMaximum = (
        'UtilizationMetricsVolumeWriteOpsPerSecondMaximum'
    )
    UtilizationMetricsVolumeReadBytesPerSecondMaximum = (
        'UtilizationMetricsVolumeReadBytesPerSecondMaximum'
    )
    UtilizationMetricsVolumeWriteBytesPerSecondMaximum = (
        'UtilizationMetricsVolumeWriteBytesPerSecondMaximum'
    )
    LookbackPeriodInDays = 'LookbackPeriodInDays'
    CurrentConfigurationVolumeType = 'CurrentConfigurationVolumeType'
    CurrentConfigurationVolumeBaselineIOPS = 'CurrentConfigurationVolumeBaselineIOPS'
    CurrentConfigurationVolumeBaselineThroughput = (
        'CurrentConfigurationVolumeBaselineThroughput'
    )
    CurrentConfigurationVolumeBurstIOPS = 'CurrentConfigurationVolumeBurstIOPS'
    CurrentConfigurationVolumeBurstThroughput = (
        'CurrentConfigurationVolumeBurstThroughput'
    )
    CurrentConfigurationVolumeSize = 'CurrentConfigurationVolumeSize'
    CurrentMonthlyPrice = 'CurrentMonthlyPrice'
    RecommendationOptionsConfigurationVolumeType = (
        'RecommendationOptionsConfigurationVolumeType'
    )
    RecommendationOptionsConfigurationVolumeBaselineIOPS = (
        'RecommendationOptionsConfigurationVolumeBaselineIOPS'
    )
    RecommendationOptionsConfigurationVolumeBaselineThroughput = (
        'RecommendationOptionsConfigurationVolumeBaselineThroughput'
    )
    RecommendationOptionsConfigurationVolumeBurstIOPS = (
        'RecommendationOptionsConfigurationVolumeBurstIOPS'
    )
    RecommendationOptionsConfigurationVolumeBurstThroughput = (
        'RecommendationOptionsConfigurationVolumeBurstThroughput'
    )
    RecommendationOptionsConfigurationVolumeSize = (
        'RecommendationOptionsConfigurationVolumeSize'
    )
    RecommendationOptionsMonthlyPrice = 'RecommendationOptionsMonthlyPrice'
    RecommendationOptionsPerformanceRisk = 'RecommendationOptionsPerformanceRisk'
    LastRefreshTimestamp = 'LastRefreshTimestamp'
    CurrentPerformanceRisk = 'CurrentPerformanceRisk'
    RecommendationOptionsSavingsOpportunityPercentage = (
        'RecommendationOptionsSavingsOpportunityPercentage'
    )
    RecommendationOptionsEstimatedMonthlySavingsCurrency = (
        'RecommendationOptionsEstimatedMonthlySavingsCurrency'
    )
    RecommendationOptionsEstimatedMonthlySavingsValue = (
        'RecommendationOptionsEstimatedMonthlySavingsValue'
    )
    RootVolume = 'RootVolume'


class ExportableVolumeFields(RootModel[List[ExportableVolumeField]]):
    root: List[ExportableVolumeField]


class ExternalMetricsSource(Enum):
    Datadog = 'Datadog'
    Dynatrace = 'Dynatrace'
    NewRelic = 'NewRelic'
    Instana = 'Instana'


class FailureReason(RootModel[str]):
    root: str


class FileFormat(Enum):
    Csv = 'Csv'


class FilterName(Enum):
    Finding = 'Finding'
    FindingReasonCodes = 'FindingReasonCodes'
    RecommendationSourceType = 'RecommendationSourceType'


class FilterValue(RootModel[str]):
    root: str


class FilterValues(RootModel[List[FilterValue]]):
    root: List[FilterValue]


class Finding(Enum):
    Underprovisioned = 'Underprovisioned'
    Overprovisioned = 'Overprovisioned'
    Optimized = 'Optimized'
    NotOptimized = 'NotOptimized'


class FindingReasonCode(Enum):
    MemoryOverprovisioned = 'MemoryOverprovisioned'
    MemoryUnderprovisioned = 'MemoryUnderprovisioned'


class FunctionArn(RootModel[str]):
    root: str


class FunctionArns(RootModel[List[FunctionArn]]):
    root: List[FunctionArn]


class FunctionVersion(RootModel[str]):
    root: str


class GetEnrollmentStatusRequest(BaseModel):
    pass


class High(RootModel[int]):
    root: int


class Identifier(RootModel[str]):
    root: str


class IncludeMemberAccounts(RootModel[bool]):
    root: bool


class InferredWorkloadType(Enum):
    AmazonEmr = 'AmazonEmr'
    ApacheCassandra = 'ApacheCassandra'
    ApacheHadoop = 'ApacheHadoop'
    Memcached = 'Memcached'
    Nginx = 'Nginx'
    PostgreSql = 'PostgreSql'
    Redis = 'Redis'
    Kafka = 'Kafka'


class InferredWorkloadTypes(RootModel[List[InferredWorkloadType]]):
    root: List[InferredWorkloadType]


class InferredWorkloadTypesPreference(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class InstanceArn(RootModel[str]):
    root: str


class InstanceArns(RootModel[List[InstanceArn]]):
    root: List[InstanceArn]


class InstanceName(RootModel[str]):
    root: str


class InstanceRecommendationFindingReasonCode(Enum):
    CPUOverprovisioned = 'CPUOverprovisioned'
    CPUUnderprovisioned = 'CPUUnderprovisioned'
    MemoryOverprovisioned = 'MemoryOverprovisioned'
    MemoryUnderprovisioned = 'MemoryUnderprovisioned'
    EBSThroughputOverprovisioned = 'EBSThroughputOverprovisioned'
    EBSThroughputUnderprovisioned = 'EBSThroughputUnderprovisioned'
    EBSIOPSOverprovisioned = 'EBSIOPSOverprovisioned'
    EBSIOPSUnderprovisioned = 'EBSIOPSUnderprovisioned'
    NetworkBandwidthOverprovisioned = 'NetworkBandwidthOverprovisioned'
    NetworkBandwidthUnderprovisioned = 'NetworkBandwidthUnderprovisioned'
    NetworkPPSOverprovisioned = 'NetworkPPSOverprovisioned'
    NetworkPPSUnderprovisioned = 'NetworkPPSUnderprovisioned'
    DiskIOPSOverprovisioned = 'DiskIOPSOverprovisioned'
    DiskIOPSUnderprovisioned = 'DiskIOPSUnderprovisioned'
    DiskThroughputOverprovisioned = 'DiskThroughputOverprovisioned'
    DiskThroughputUnderprovisioned = 'DiskThroughputUnderprovisioned'


class InstanceRecommendationFindingReasonCodes(
    RootModel[List[InstanceRecommendationFindingReasonCode]]
):
    root: List[InstanceRecommendationFindingReasonCode]


class InstanceState(Enum):
    pending = 'pending'
    running = 'running'
    shutting_down = 'shutting-down'
    terminated = 'terminated'
    stopping = 'stopping'
    stopped = 'stopped'


class InstanceType(RootModel[str]):
    root: str


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class JobFilterName(Enum):
    ResourceType = 'ResourceType'
    JobStatus = 'JobStatus'


class JobId(RootModel[str]):
    root: str


class JobIds(RootModel[List[JobId]]):
    root: List[JobId]


class JobStatus(Enum):
    Queued = 'Queued'
    InProgress = 'InProgress'
    Complete = 'Complete'
    Failed = 'Failed'


class LambdaFunctionMemoryMetricName(Enum):
    Duration = 'Duration'


class LambdaFunctionMemoryMetricStatistic(Enum):
    LowerBound = 'LowerBound'
    UpperBound = 'UpperBound'
    Expected = 'Expected'


class LambdaFunctionMetricName(Enum):
    Duration = 'Duration'
    Memory = 'Memory'


class LambdaFunctionMetricStatistic(Enum):
    Maximum = 'Maximum'
    Average = 'Average'


class LambdaFunctionRecommendationFilterName(Enum):
    Finding = 'Finding'
    FindingReasonCode = 'FindingReasonCode'


class LambdaFunctionRecommendationFinding(Enum):
    Optimized = 'Optimized'
    NotOptimized = 'NotOptimized'
    Unavailable = 'Unavailable'


class LambdaFunctionRecommendationFindingReasonCode(Enum):
    MemoryOverprovisioned = 'MemoryOverprovisioned'
    MemoryUnderprovisioned = 'MemoryUnderprovisioned'
    InsufficientData = 'InsufficientData'
    Inconclusive = 'Inconclusive'


class LambdaFunctionRecommendationFindingReasonCodes(
    RootModel[List[LambdaFunctionRecommendationFindingReasonCode]]
):
    root: List[LambdaFunctionRecommendationFindingReasonCode]


class LastRefreshTimestamp(RootModel[datetime]):
    root: datetime


class LastUpdatedTimestamp(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class LookBackPeriodInDays(RootModel[float]):
    root: float


class Low(RootModel[int]):
    root: int


class LowerBoundValue(RootModel[float]):
    root: float


class MaxResults(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class MaxSize(RootModel[int]):
    root: int


class Medium(RootModel[int]):
    root: int


class MemberAccountsEnrolled(RootModel[bool]):
    root: bool


class MemorySize(RootModel[int]):
    root: int


class Message(RootModel[str]):
    root: str


class MetadataKey(RootModel[str]):
    root: str


class MetricName(Enum):
    Cpu = 'Cpu'
    Memory = 'Memory'
    EBS_READ_OPS_PER_SECOND = 'EBS_READ_OPS_PER_SECOND'
    EBS_WRITE_OPS_PER_SECOND = 'EBS_WRITE_OPS_PER_SECOND'
    EBS_READ_BYTES_PER_SECOND = 'EBS_READ_BYTES_PER_SECOND'
    EBS_WRITE_BYTES_PER_SECOND = 'EBS_WRITE_BYTES_PER_SECOND'
    DISK_READ_OPS_PER_SECOND = 'DISK_READ_OPS_PER_SECOND'
    DISK_WRITE_OPS_PER_SECOND = 'DISK_WRITE_OPS_PER_SECOND'
    DISK_READ_BYTES_PER_SECOND = 'DISK_READ_BYTES_PER_SECOND'
    DISK_WRITE_BYTES_PER_SECOND = 'DISK_WRITE_BYTES_PER_SECOND'
    NETWORK_IN_BYTES_PER_SECOND = 'NETWORK_IN_BYTES_PER_SECOND'
    NETWORK_OUT_BYTES_PER_SECOND = 'NETWORK_OUT_BYTES_PER_SECOND'
    NETWORK_PACKETS_IN_PER_SECOND = 'NETWORK_PACKETS_IN_PER_SECOND'
    NETWORK_PACKETS_OUT_PER_SECOND = 'NETWORK_PACKETS_OUT_PER_SECOND'


class MetricStatistic(Enum):
    Maximum = 'Maximum'
    Average = 'Average'


class MetricValue(RootModel[float]):
    root: float


class MetricValues(RootModel[List[MetricValue]]):
    root: List[MetricValue]


class MigrationEffort(Enum):
    VeryLow = 'VeryLow'
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class MinSize(RootModel[int]):
    root: int


class MissingAuthenticationToken(RootModel[Any]):
    root: Any


class NextToken(RootModel[str]):
    root: str


class NullableCpu(RootModel[int]):
    root: int


class NullableMemory(RootModel[int]):
    root: int


class NullableMemoryReservation(RootModel[int]):
    root: int


class NumberOfInvocations(RootModel[int]):
    root: int


class NumberOfMemberAccountsOptedIn(RootModel[int]):
    root: int


class OptInRequiredException(RootModel[Any]):
    root: Any


class PerformanceRisk(RootModel[confloat(ge=0.0, le=4.0)]):
    root: confloat(ge=0.0, le=4.0)


class Period(RootModel[int]):
    root: int


class PlatformDifference(Enum):
    Hypervisor = 'Hypervisor'
    NetworkInterface = 'NetworkInterface'
    StorageInterface = 'StorageInterface'
    InstanceStoreAvailability = 'InstanceStoreAvailability'
    VirtualizationType = 'VirtualizationType'
    Architecture = 'Architecture'


class PlatformDifferences(RootModel[List[PlatformDifference]]):
    root: List[PlatformDifference]


class PutRecommendationPreferencesResponse(BaseModel):
    pass


class Rank(RootModel[int]):
    root: int


class RecommendationPreferenceName(Enum):
    EnhancedInfrastructureMetrics = 'EnhancedInfrastructureMetrics'
    InferredWorkloadTypes = 'InferredWorkloadTypes'
    ExternalMetricsPreference = 'ExternalMetricsPreference'


class RecommendationPreferenceNames(RootModel[List[RecommendationPreferenceName]]):
    root: List[RecommendationPreferenceName]


class RecommendationPreferences(BaseModel):
    cpuVendorArchitectures: Optional[CpuVendorArchitectures] = None


class RecommendationSourceArn(RootModel[str]):
    root: str


class RecommendationSourceType(Enum):
    Ec2Instance = 'Ec2Instance'
    AutoScalingGroup = 'AutoScalingGroup'
    EbsVolume = 'EbsVolume'
    LambdaFunction = 'LambdaFunction'
    EcsService = 'EcsService'


class RecommendedInstanceType(RootModel[str]):
    root: str


class ResourceArn(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceType(Enum):
    Ec2Instance = 'Ec2Instance'
    AutoScalingGroup = 'AutoScalingGroup'
    EbsVolume = 'EbsVolume'
    LambdaFunction = 'LambdaFunction'
    NotApplicable = 'NotApplicable'
    EcsService = 'EcsService'


class RootVolume(RootModel[bool]):
    root: bool


class S3Destination(BaseModel):
    bucket: Optional[DestinationBucket] = None
    key: Optional[DestinationKey] = None
    metadataKey: Optional[MetadataKey] = None


class S3DestinationConfig(BaseModel):
    bucket: Optional[DestinationBucket] = None
    keyPrefix: Optional[DestinationKeyPrefix] = None


class SavingsOpportunityPercentage(RootModel[float]):
    root: float


class ScopeName(Enum):
    Organization = 'Organization'
    AccountId = 'AccountId'
    ResourceArn = 'ResourceArn'


class ScopeValue(RootModel[str]):
    root: str


class ServiceArn(RootModel[str]):
    root: str


class ServiceArns(RootModel[List[ServiceArn]]):
    root: List[ServiceArn]


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class Status(Enum):
    Active = 'Active'
    Inactive = 'Inactive'
    Pending = 'Pending'
    Failed = 'Failed'


class StatusReason(RootModel[str]):
    root: str


class SummaryValue(RootModel[float]):
    root: float


class TaskDefinitionArn(RootModel[str]):
    root: str


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class Timestamps(RootModel[List[Timestamp]]):
    root: List[Timestamp]


class UpdateEnrollmentStatusRequest(BaseModel):
    includeMemberAccounts: Optional[IncludeMemberAccounts] = None
    status: Status


class UpdateEnrollmentStatusResponse(BaseModel):
    status: Optional[Status] = None
    statusReason: Optional[StatusReason] = None


class UpperBoundValue(RootModel[float]):
    root: float


class UtilizationMetric(BaseModel):
    name: Optional[MetricName] = None
    statistic: Optional[MetricStatistic] = None
    value: Optional[MetricValue] = None


class UtilizationMetrics(RootModel[List[UtilizationMetric]]):
    root: List[UtilizationMetric]


class Value(RootModel[float]):
    root: float


class VeryLow(RootModel[int]):
    root: int


class VolumeArn(RootModel[str]):
    root: str


class VolumeArns(RootModel[List[VolumeArn]]):
    root: List[VolumeArn]


class VolumeBaselineIOPS(RootModel[int]):
    root: int


class VolumeBaselineThroughput(RootModel[int]):
    root: int


class VolumeBurstIOPS(RootModel[int]):
    root: int


class VolumeBurstThroughput(RootModel[int]):
    root: int


class VolumeSize(RootModel[int]):
    root: int


class VolumeType(RootModel[str]):
    root: str


class XAmzTarget(Enum):
    ComputeOptimizerService_DeleteRecommendationPreferences = (
        'ComputeOptimizerService.DeleteRecommendationPreferences'
    )


class XAmzTarget1(Enum):
    ComputeOptimizerService_DescribeRecommendationExportJobs = (
        'ComputeOptimizerService.DescribeRecommendationExportJobs'
    )


class XAmzTarget2(Enum):
    ComputeOptimizerService_ExportAutoScalingGroupRecommendations = (
        'ComputeOptimizerService.ExportAutoScalingGroupRecommendations'
    )


class XAmzTarget3(Enum):
    ComputeOptimizerService_ExportEBSVolumeRecommendations = (
        'ComputeOptimizerService.ExportEBSVolumeRecommendations'
    )


class XAmzTarget4(Enum):
    ComputeOptimizerService_ExportEC2InstanceRecommendations = (
        'ComputeOptimizerService.ExportEC2InstanceRecommendations'
    )


class XAmzTarget5(Enum):
    ComputeOptimizerService_ExportECSServiceRecommendations = (
        'ComputeOptimizerService.ExportECSServiceRecommendations'
    )


class XAmzTarget6(Enum):
    ComputeOptimizerService_ExportLambdaFunctionRecommendations = (
        'ComputeOptimizerService.ExportLambdaFunctionRecommendations'
    )


class XAmzTarget7(Enum):
    ComputeOptimizerService_GetAutoScalingGroupRecommendations = (
        'ComputeOptimizerService.GetAutoScalingGroupRecommendations'
    )


class XAmzTarget8(Enum):
    ComputeOptimizerService_GetEBSVolumeRecommendations = (
        'ComputeOptimizerService.GetEBSVolumeRecommendations'
    )


class XAmzTarget9(Enum):
    ComputeOptimizerService_GetEC2InstanceRecommendations = (
        'ComputeOptimizerService.GetEC2InstanceRecommendations'
    )


class XAmzTarget10(Enum):
    ComputeOptimizerService_GetEC2RecommendationProjectedMetrics = (
        'ComputeOptimizerService.GetEC2RecommendationProjectedMetrics'
    )


class XAmzTarget11(Enum):
    ComputeOptimizerService_GetECSServiceRecommendationProjectedMetrics = (
        'ComputeOptimizerService.GetECSServiceRecommendationProjectedMetrics'
    )


class XAmzTarget12(Enum):
    ComputeOptimizerService_GetECSServiceRecommendations = (
        'ComputeOptimizerService.GetECSServiceRecommendations'
    )


class XAmzTarget13(Enum):
    ComputeOptimizerService_GetEffectiveRecommendationPreferences = (
        'ComputeOptimizerService.GetEffectiveRecommendationPreferences'
    )


class XAmzTarget14(Enum):
    ComputeOptimizerService_GetEnrollmentStatus = (
        'ComputeOptimizerService.GetEnrollmentStatus'
    )


class XAmzTarget15(Enum):
    ComputeOptimizerService_GetEnrollmentStatusesForOrganization = (
        'ComputeOptimizerService.GetEnrollmentStatusesForOrganization'
    )


class XAmzTarget16(Enum):
    ComputeOptimizerService_GetLambdaFunctionRecommendations = (
        'ComputeOptimizerService.GetLambdaFunctionRecommendations'
    )


class XAmzTarget17(Enum):
    ComputeOptimizerService_GetRecommendationPreferences = (
        'ComputeOptimizerService.GetRecommendationPreferences'
    )


class XAmzTarget18(Enum):
    ComputeOptimizerService_GetRecommendationSummaries = (
        'ComputeOptimizerService.GetRecommendationSummaries'
    )


class XAmzTarget19(Enum):
    ComputeOptimizerService_PutRecommendationPreferences = (
        'ComputeOptimizerService.PutRecommendationPreferences'
    )


class XAmzTarget20(Enum):
    ComputeOptimizerService_UpdateEnrollmentStatus = (
        'ComputeOptimizerService.UpdateEnrollmentStatus'
    )


class AccountEnrollmentStatus(BaseModel):
    accountId: Optional[AccountId] = None
    lastUpdatedTimestamp: Optional[LastUpdatedTimestamp] = None
    status: Optional[Status] = None
    statusReason: Optional[StatusReason] = None


class AccountEnrollmentStatuses(RootModel[List[AccountEnrollmentStatus]]):
    root: List[AccountEnrollmentStatus]


class AutoScalingGroupConfiguration(BaseModel):
    desiredCapacity: Optional[DesiredCapacity] = None
    instanceType: Optional[InstanceType] = None
    maxSize: Optional[MaxSize] = None
    minSize: Optional[MinSize] = None


class CurrentPerformanceRiskRatings(BaseModel):
    high: Optional[High] = None
    low: Optional[Low] = None
    medium: Optional[Medium] = None
    veryLow: Optional[VeryLow] = None


class EBSFilter(BaseModel):
    name: Optional[EBSFilterName] = None
    values: Optional[FilterValues] = None


class EBSFilters(RootModel[List[EBSFilter]]):
    root: List[EBSFilter]


class EBSUtilizationMetric(BaseModel):
    name: Optional[EBSMetricName] = None
    statistic: Optional[MetricStatistic] = None
    value: Optional[MetricValue] = None


class EBSUtilizationMetrics(RootModel[List[EBSUtilizationMetric]]):
    root: List[EBSUtilizationMetric]


class ECSServiceProjectedMetric(BaseModel):
    lowerBoundValues: Optional[MetricValues] = None
    name: Optional[ECSServiceMetricName] = None
    timestamps: Optional[Timestamps] = None
    upperBoundValues: Optional[MetricValues] = None


class ECSServiceProjectedMetrics(RootModel[List[ECSServiceProjectedMetric]]):
    root: List[ECSServiceProjectedMetric]


class ECSServiceProjectedUtilizationMetric(BaseModel):
    lowerBoundValue: Optional[LowerBoundValue] = None
    name: Optional[ECSServiceMetricName] = None
    statistic: Optional[ECSServiceMetricStatistic] = None
    upperBoundValue: Optional[UpperBoundValue] = None


class ECSServiceProjectedUtilizationMetrics(
    RootModel[List[ECSServiceProjectedUtilizationMetric]]
):
    root: List[ECSServiceProjectedUtilizationMetric]


class ECSServiceRecommendationFilter(BaseModel):
    name: Optional[ECSServiceRecommendationFilterName] = None
    values: Optional[FilterValues] = None


class ECSServiceRecommendationFilters(RootModel[List[ECSServiceRecommendationFilter]]):
    root: List[ECSServiceRecommendationFilter]


class ECSServiceRecommendedOptionProjectedMetric(BaseModel):
    projectedMetrics: Optional[ECSServiceProjectedMetrics] = None
    recommendedCpuUnits: Optional[CpuSize] = None
    recommendedMemorySize: Optional[MemorySize] = None


class ECSServiceRecommendedOptionProjectedMetrics(
    RootModel[List[ECSServiceRecommendedOptionProjectedMetric]]
):
    root: List[ECSServiceRecommendedOptionProjectedMetric]


class ECSServiceUtilizationMetric(BaseModel):
    name: Optional[ECSServiceMetricName] = None
    statistic: Optional[ECSServiceMetricStatistic] = None
    value: Optional[MetricValue] = None


class ECSServiceUtilizationMetrics(RootModel[List[ECSServiceUtilizationMetric]]):
    root: List[ECSServiceUtilizationMetric]


class EnrollmentFilter(BaseModel):
    name: Optional[EnrollmentFilterName] = None
    values: Optional[FilterValues] = None


class EnrollmentFilters(RootModel[List[EnrollmentFilter]]):
    root: List[EnrollmentFilter]


class EstimatedMonthlySavings(BaseModel):
    currency: Optional[Currency] = None
    value: Optional[Value] = None


class ExportAutoScalingGroupRecommendationsResponse(BaseModel):
    jobId: Optional[JobId] = None
    s3Destination: Optional[S3Destination] = None


class ExportDestination(BaseModel):
    s3: Optional[S3Destination] = None


class ExportEBSVolumeRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    fieldsToExport: Optional[ExportableVolumeFields] = None
    fileFormat: Optional[FileFormat] = None
    filters: Optional[EBSFilters] = None
    includeMemberAccounts: Optional[IncludeMemberAccounts] = None
    s3DestinationConfig: S3DestinationConfig


class ExportEBSVolumeRecommendationsResponse(BaseModel):
    jobId: Optional[JobId] = None
    s3Destination: Optional[S3Destination] = None


class ExportEC2InstanceRecommendationsResponse(BaseModel):
    jobId: Optional[JobId] = None
    s3Destination: Optional[S3Destination] = None


class ExportECSServiceRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    fieldsToExport: Optional[ExportableECSServiceFields] = None
    fileFormat: Optional[FileFormat] = None
    filters: Optional[ECSServiceRecommendationFilters] = None
    includeMemberAccounts: Optional[IncludeMemberAccounts] = None
    s3DestinationConfig: S3DestinationConfig


class ExportECSServiceRecommendationsResponse(BaseModel):
    jobId: Optional[JobId] = None
    s3Destination: Optional[S3Destination] = None


class ExportLambdaFunctionRecommendationsResponse(BaseModel):
    jobId: Optional[JobId] = None
    s3Destination: Optional[S3Destination] = None


class ExternalMetricsPreference(BaseModel):
    source: Optional[ExternalMetricsSource] = None


class Filter(BaseModel):
    name: Optional[FilterName] = None
    values: Optional[FilterValues] = None


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class GetAutoScalingGroupRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    autoScalingGroupArns: Optional[AutoScalingGroupArns] = None
    filters: Optional[Filters] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    recommendationPreferences: Optional[RecommendationPreferences] = None


class GetEBSVolumeRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    filters: Optional[EBSFilters] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    volumeArns: Optional[VolumeArns] = None


class GetEC2InstanceRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    filters: Optional[Filters] = None
    instanceArns: Optional[InstanceArns] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    recommendationPreferences: Optional[RecommendationPreferences] = None


class GetEC2RecommendationProjectedMetricsRequest(BaseModel):
    endTime: Timestamp
    instanceArn: InstanceArn
    period: Period
    recommendationPreferences: Optional[RecommendationPreferences] = None
    startTime: Timestamp
    stat: MetricStatistic


class GetECSServiceRecommendationProjectedMetricsRequest(BaseModel):
    endTime: Timestamp
    period: Period
    serviceArn: ServiceArn
    startTime: Timestamp
    stat: MetricStatistic


class GetECSServiceRecommendationProjectedMetricsResponse(BaseModel):
    recommendedOptionProjectedMetrics: Optional[
        ECSServiceRecommendedOptionProjectedMetrics
    ] = None


class GetECSServiceRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    filters: Optional[ECSServiceRecommendationFilters] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    serviceArns: Optional[ServiceArns] = None


class GetEffectiveRecommendationPreferencesRequest(BaseModel):
    resourceArn: ResourceArn


class GetEffectiveRecommendationPreferencesResponse(BaseModel):
    enhancedInfrastructureMetrics: Optional[EnhancedInfrastructureMetrics] = None
    externalMetricsPreference: Optional[ExternalMetricsPreference] = None


class GetEnrollmentStatusResponse(BaseModel):
    lastUpdatedTimestamp: Optional[LastUpdatedTimestamp] = None
    memberAccountsEnrolled: Optional[MemberAccountsEnrolled] = None
    numberOfMemberAccountsOptedIn: Optional[NumberOfMemberAccountsOptedIn] = None
    status: Optional[Status] = None
    statusReason: Optional[StatusReason] = None


class GetEnrollmentStatusesForOrganizationRequest(BaseModel):
    filters: Optional[EnrollmentFilters] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class GetEnrollmentStatusesForOrganizationResponse(BaseModel):
    accountEnrollmentStatuses: Optional[AccountEnrollmentStatuses] = None
    nextToken: Optional[NextToken] = None


class GetRecommendationError(BaseModel):
    code: Optional[Code] = None
    identifier: Optional[Identifier] = None
    message: Optional[Message] = None


class GetRecommendationErrors(RootModel[List[GetRecommendationError]]):
    root: List[GetRecommendationError]


class GetRecommendationSummariesRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class JobFilter(BaseModel):
    name: Optional[JobFilterName] = None
    values: Optional[FilterValues] = None


class JobFilters(RootModel[List[JobFilter]]):
    root: List[JobFilter]


class LambdaFunctionMemoryProjectedMetric(BaseModel):
    name: Optional[LambdaFunctionMemoryMetricName] = None
    statistic: Optional[LambdaFunctionMemoryMetricStatistic] = None
    value: Optional[MetricValue] = None


class LambdaFunctionMemoryProjectedMetrics(
    RootModel[List[LambdaFunctionMemoryProjectedMetric]]
):
    root: List[LambdaFunctionMemoryProjectedMetric]


class LambdaFunctionRecommendationFilter(BaseModel):
    name: Optional[LambdaFunctionRecommendationFilterName] = None
    values: Optional[FilterValues] = None


class LambdaFunctionRecommendationFilters(
    RootModel[List[LambdaFunctionRecommendationFilter]]
):
    root: List[LambdaFunctionRecommendationFilter]


class LambdaFunctionUtilizationMetric(BaseModel):
    name: Optional[LambdaFunctionMetricName] = None
    statistic: Optional[LambdaFunctionMetricStatistic] = None
    value: Optional[MetricValue] = None


class LambdaFunctionUtilizationMetrics(
    RootModel[List[LambdaFunctionUtilizationMetric]]
):
    root: List[LambdaFunctionUtilizationMetric]


class MemorySizeConfiguration(BaseModel):
    memory: Optional[NullableMemory] = None
    memoryReservation: Optional[NullableMemoryReservation] = None


class ProjectedMetric(BaseModel):
    name: Optional[MetricName] = None
    timestamps: Optional[Timestamps] = None
    values: Optional[MetricValues] = None


class ProjectedMetrics(RootModel[List[ProjectedMetric]]):
    root: List[ProjectedMetric]


class ProjectedUtilizationMetrics(RootModel[List[UtilizationMetric]]):
    root: List[UtilizationMetric]


class ReasonCodeSummary(BaseModel):
    name: Optional[FindingReasonCode] = None
    value: Optional[SummaryValue] = None


class RecommendationExportJob(BaseModel):
    creationTimestamp: Optional[CreationTimestamp] = None
    destination: Optional[ExportDestination] = None
    failureReason: Optional[FailureReason] = None
    jobId: Optional[JobId] = None
    lastUpdatedTimestamp: Optional[LastUpdatedTimestamp] = None
    resourceType: Optional[ResourceType] = None
    status: Optional[JobStatus] = None


class RecommendationExportJobs(RootModel[List[RecommendationExportJob]]):
    root: List[RecommendationExportJob]


class RecommendationSource(BaseModel):
    recommendationSourceArn: Optional[RecommendationSourceArn] = None
    recommendationSourceType: Optional[RecommendationSourceType] = None


class RecommendationSources(RootModel[List[RecommendationSource]]):
    root: List[RecommendationSource]


class RecommendedOptionProjectedMetric(BaseModel):
    projectedMetrics: Optional[ProjectedMetrics] = None
    rank: Optional[Rank] = None
    recommendedInstanceType: Optional[RecommendedInstanceType] = None


class RecommendedOptionProjectedMetrics(
    RootModel[List[RecommendedOptionProjectedMetric]]
):
    root: List[RecommendedOptionProjectedMetric]


class SavingsOpportunity(BaseModel):
    estimatedMonthlySavings: Optional[EstimatedMonthlySavings] = None
    savingsOpportunityPercentage: Optional[SavingsOpportunityPercentage] = None


class Scope(BaseModel):
    name: Optional[ScopeName] = None
    value: Optional[ScopeValue] = None


class VolumeConfiguration(BaseModel):
    rootVolume: Optional[RootVolume] = None
    volumeBaselineIOPS: Optional[VolumeBaselineIOPS] = None
    volumeBaselineThroughput: Optional[VolumeBaselineThroughput] = None
    volumeBurstIOPS: Optional[VolumeBurstIOPS] = None
    volumeBurstThroughput: Optional[VolumeBurstThroughput] = None
    volumeSize: Optional[VolumeSize] = None
    volumeType: Optional[VolumeType] = None


class VolumeRecommendationOption(BaseModel):
    configuration: Optional[VolumeConfiguration] = None
    performanceRisk: Optional[PerformanceRisk] = None
    rank: Optional[Rank] = None
    savingsOpportunity: Optional[SavingsOpportunity] = None


class VolumeRecommendationOptions(RootModel[List[VolumeRecommendationOption]]):
    root: List[VolumeRecommendationOption]


class AutoScalingGroupRecommendationOption(BaseModel):
    configuration: Optional[AutoScalingGroupConfiguration] = None
    migrationEffort: Optional[MigrationEffort] = None
    performanceRisk: Optional[PerformanceRisk] = None
    projectedUtilizationMetrics: Optional[ProjectedUtilizationMetrics] = None
    rank: Optional[Rank] = None
    savingsOpportunity: Optional[SavingsOpportunity] = None


class AutoScalingGroupRecommendationOptions(
    RootModel[List[AutoScalingGroupRecommendationOption]]
):
    root: List[AutoScalingGroupRecommendationOption]


class ContainerConfiguration(BaseModel):
    containerName: Optional[ContainerName] = None
    cpu: Optional[NullableCpu] = None
    memorySizeConfiguration: Optional[MemorySizeConfiguration] = None


class ContainerConfigurations(RootModel[List[ContainerConfiguration]]):
    root: List[ContainerConfiguration]


class ContainerRecommendation(BaseModel):
    containerName: Optional[ContainerName] = None
    cpu: Optional[NullableCpu] = None
    memorySizeConfiguration: Optional[MemorySizeConfiguration] = None


class ContainerRecommendations(RootModel[List[ContainerRecommendation]]):
    root: List[ContainerRecommendation]


class DeleteRecommendationPreferencesRequest(BaseModel):
    recommendationPreferenceNames: RecommendationPreferenceNames
    resourceType: ResourceType
    scope: Optional[Scope] = None


class DescribeRecommendationExportJobsRequest(BaseModel):
    filters: Optional[JobFilters] = None
    jobIds: Optional[JobIds] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class DescribeRecommendationExportJobsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    recommendationExportJobs: Optional[RecommendationExportJobs] = None


class ECSServiceRecommendationOption(BaseModel):
    containerRecommendations: Optional[ContainerRecommendations] = None
    cpu: Optional[NullableCpu] = None
    memory: Optional[NullableMemory] = None
    projectedUtilizationMetrics: Optional[ECSServiceProjectedUtilizationMetrics] = None
    savingsOpportunity: Optional[SavingsOpportunity] = None


class ECSServiceRecommendationOptions(RootModel[List[ECSServiceRecommendationOption]]):
    root: List[ECSServiceRecommendationOption]


class EffectiveRecommendationPreferences(BaseModel):
    cpuVendorArchitectures: Optional[CpuVendorArchitectures] = None
    enhancedInfrastructureMetrics: Optional[EnhancedInfrastructureMetrics] = None
    externalMetricsPreference: Optional[ExternalMetricsPreference] = None
    inferredWorkloadTypes: Optional[InferredWorkloadTypesPreference] = None


class ExportAutoScalingGroupRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    fieldsToExport: Optional[ExportableAutoScalingGroupFields] = None
    fileFormat: Optional[FileFormat] = None
    filters: Optional[Filters] = None
    includeMemberAccounts: Optional[IncludeMemberAccounts] = None
    recommendationPreferences: Optional[RecommendationPreferences] = None
    s3DestinationConfig: S3DestinationConfig


class ExportEC2InstanceRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    fieldsToExport: Optional[ExportableInstanceFields] = None
    fileFormat: Optional[FileFormat] = None
    filters: Optional[Filters] = None
    includeMemberAccounts: Optional[IncludeMemberAccounts] = None
    recommendationPreferences: Optional[RecommendationPreferences] = None
    s3DestinationConfig: S3DestinationConfig


class ExportLambdaFunctionRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    fieldsToExport: Optional[ExportableLambdaFunctionFields] = None
    fileFormat: Optional[FileFormat] = None
    filters: Optional[LambdaFunctionRecommendationFilters] = None
    includeMemberAccounts: Optional[IncludeMemberAccounts] = None
    s3DestinationConfig: S3DestinationConfig


class GetEC2RecommendationProjectedMetricsResponse(BaseModel):
    recommendedOptionProjectedMetrics: Optional[RecommendedOptionProjectedMetrics] = (
        None
    )


class GetLambdaFunctionRecommendationsRequest(BaseModel):
    accountIds: Optional[AccountIds] = None
    filters: Optional[LambdaFunctionRecommendationFilters] = None
    functionArns: Optional[FunctionArns] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class GetRecommendationPreferencesRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    resourceType: ResourceType
    scope: Optional[Scope] = None


class InstanceRecommendationOption(BaseModel):
    instanceType: Optional[InstanceType] = None
    migrationEffort: Optional[MigrationEffort] = None
    performanceRisk: Optional[PerformanceRisk] = None
    platformDifferences: Optional[PlatformDifferences] = None
    projectedUtilizationMetrics: Optional[ProjectedUtilizationMetrics] = None
    rank: Optional[Rank] = None
    savingsOpportunity: Optional[SavingsOpportunity] = None


class LambdaFunctionMemoryRecommendationOption(BaseModel):
    memorySize: Optional[MemorySize] = None
    projectedUtilizationMetrics: Optional[LambdaFunctionMemoryProjectedMetrics] = None
    rank: Optional[Rank] = None
    savingsOpportunity: Optional[SavingsOpportunity] = None


class LambdaFunctionMemoryRecommendationOptions(
    RootModel[List[LambdaFunctionMemoryRecommendationOption]]
):
    root: List[LambdaFunctionMemoryRecommendationOption]


class LambdaFunctionRecommendation(BaseModel):
    accountId: Optional[AccountId] = None
    currentMemorySize: Optional[MemorySize] = None
    currentPerformanceRisk: Optional[CurrentPerformanceRisk] = None
    finding: Optional[LambdaFunctionRecommendationFinding] = None
    findingReasonCodes: Optional[LambdaFunctionRecommendationFindingReasonCodes] = None
    functionArn: Optional[FunctionArn] = None
    functionVersion: Optional[FunctionVersion] = None
    lastRefreshTimestamp: Optional[LastRefreshTimestamp] = None
    lookbackPeriodInDays: Optional[LookBackPeriodInDays] = None
    memorySizeRecommendationOptions: Optional[
        LambdaFunctionMemoryRecommendationOptions
    ] = None
    numberOfInvocations: Optional[NumberOfInvocations] = None
    utilizationMetrics: Optional[LambdaFunctionUtilizationMetrics] = None


class LambdaFunctionRecommendations(RootModel[List[LambdaFunctionRecommendation]]):
    root: List[LambdaFunctionRecommendation]


class PutRecommendationPreferencesRequest(BaseModel):
    enhancedInfrastructureMetrics: Optional[EnhancedInfrastructureMetrics] = None
    externalMetricsPreference: Optional[ExternalMetricsPreference] = None
    inferredWorkloadTypes: Optional[InferredWorkloadTypesPreference] = None
    resourceType: ResourceType
    scope: Optional[Scope] = None


class ReasonCodeSummaries(RootModel[List[ReasonCodeSummary]]):
    root: List[ReasonCodeSummary]


class RecommendationOptions(RootModel[List[InstanceRecommendationOption]]):
    root: List[InstanceRecommendationOption]


class RecommendationPreferencesDetail(BaseModel):
    enhancedInfrastructureMetrics: Optional[EnhancedInfrastructureMetrics] = None
    externalMetricsPreference: Optional[ExternalMetricsPreference] = None
    inferredWorkloadTypes: Optional[InferredWorkloadTypesPreference] = None
    resourceType: Optional[ResourceType] = None
    scope: Optional[Scope] = None


class RecommendationPreferencesDetails(
    RootModel[List[RecommendationPreferencesDetail]]
):
    root: List[RecommendationPreferencesDetail]


class ServiceConfiguration(BaseModel):
    autoScalingConfiguration: Optional[AutoScalingConfiguration] = None
    containerConfigurations: Optional[ContainerConfigurations] = None
    cpu: Optional[NullableCpu] = None
    memory: Optional[NullableMemory] = None
    taskDefinitionArn: Optional[TaskDefinitionArn] = None


class Summary(BaseModel):
    name: Optional[Finding] = None
    reasonCodeSummaries: Optional[ReasonCodeSummaries] = None
    value: Optional[SummaryValue] = None


class VolumeRecommendation(BaseModel):
    accountId: Optional[AccountId] = None
    currentConfiguration: Optional[VolumeConfiguration] = None
    currentPerformanceRisk: Optional[CurrentPerformanceRisk] = None
    finding: Optional[EBSFinding] = None
    lastRefreshTimestamp: Optional[LastRefreshTimestamp] = None
    lookBackPeriodInDays: Optional[LookBackPeriodInDays] = None
    utilizationMetrics: Optional[EBSUtilizationMetrics] = None
    volumeArn: Optional[VolumeArn] = None
    volumeRecommendationOptions: Optional[VolumeRecommendationOptions] = None


class VolumeRecommendations(RootModel[List[VolumeRecommendation]]):
    root: List[VolumeRecommendation]


class AutoScalingGroupRecommendation(BaseModel):
    accountId: Optional[AccountId] = None
    autoScalingGroupArn: Optional[AutoScalingGroupArn] = None
    autoScalingGroupName: Optional[AutoScalingGroupName] = None
    currentConfiguration: Optional[AutoScalingGroupConfiguration] = None
    currentPerformanceRisk: Optional[CurrentPerformanceRisk] = None
    effectiveRecommendationPreferences: Optional[EffectiveRecommendationPreferences] = (
        None
    )
    finding: Optional[Finding] = None
    inferredWorkloadTypes: Optional[InferredWorkloadTypes] = None
    lastRefreshTimestamp: Optional[LastRefreshTimestamp] = None
    lookBackPeriodInDays: Optional[LookBackPeriodInDays] = None
    recommendationOptions: Optional[AutoScalingGroupRecommendationOptions] = None
    utilizationMetrics: Optional[UtilizationMetrics] = None


class AutoScalingGroupRecommendations(RootModel[List[AutoScalingGroupRecommendation]]):
    root: List[AutoScalingGroupRecommendation]


class ECSServiceRecommendation(BaseModel):
    accountId: Optional[AccountId] = None
    currentPerformanceRisk: Optional[CurrentPerformanceRisk] = None
    currentServiceConfiguration: Optional[ServiceConfiguration] = None
    finding: Optional[ECSServiceRecommendationFinding] = None
    findingReasonCodes: Optional[ECSServiceRecommendationFindingReasonCodes] = None
    lastRefreshTimestamp: Optional[LastRefreshTimestamp] = None
    launchType: Optional[ECSServiceLaunchType] = None
    lookbackPeriodInDays: Optional[LookBackPeriodInDays] = None
    serviceArn: Optional[ServiceArn] = None
    serviceRecommendationOptions: Optional[ECSServiceRecommendationOptions] = None
    utilizationMetrics: Optional[ECSServiceUtilizationMetrics] = None


class ECSServiceRecommendations(RootModel[List[ECSServiceRecommendation]]):
    root: List[ECSServiceRecommendation]


class GetAutoScalingGroupRecommendationsResponse(BaseModel):
    autoScalingGroupRecommendations: Optional[AutoScalingGroupRecommendations] = None
    errors: Optional[GetRecommendationErrors] = None
    nextToken: Optional[NextToken] = None


class GetEBSVolumeRecommendationsResponse(BaseModel):
    errors: Optional[GetRecommendationErrors] = None
    nextToken: Optional[NextToken] = None
    volumeRecommendations: Optional[VolumeRecommendations] = None


class GetECSServiceRecommendationsResponse(BaseModel):
    ecsServiceRecommendations: Optional[ECSServiceRecommendations] = None
    errors: Optional[GetRecommendationErrors] = None
    nextToken: Optional[NextToken] = None


class GetLambdaFunctionRecommendationsResponse(BaseModel):
    lambdaFunctionRecommendations: Optional[LambdaFunctionRecommendations] = None
    nextToken: Optional[NextToken] = None


class GetRecommendationPreferencesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    recommendationPreferencesDetails: Optional[RecommendationPreferencesDetails] = None


class InstanceRecommendation(BaseModel):
    accountId: Optional[AccountId] = None
    currentInstanceType: Optional[CurrentInstanceType] = None
    currentPerformanceRisk: Optional[CurrentPerformanceRisk] = None
    effectiveRecommendationPreferences: Optional[EffectiveRecommendationPreferences] = (
        None
    )
    finding: Optional[Finding] = None
    findingReasonCodes: Optional[InstanceRecommendationFindingReasonCodes] = None
    inferredWorkloadTypes: Optional[InferredWorkloadTypes] = None
    instanceArn: Optional[InstanceArn] = None
    instanceName: Optional[InstanceName] = None
    instanceState: Optional[InstanceState] = None
    lastRefreshTimestamp: Optional[LastRefreshTimestamp] = None
    lookBackPeriodInDays: Optional[LookBackPeriodInDays] = None
    recommendationOptions: Optional[RecommendationOptions] = None
    recommendationSources: Optional[RecommendationSources] = None
    utilizationMetrics: Optional[UtilizationMetrics] = None


class InstanceRecommendations(RootModel[List[InstanceRecommendation]]):
    root: List[InstanceRecommendation]


class Summaries(RootModel[List[Summary]]):
    root: List[Summary]


class GetEC2InstanceRecommendationsResponse(BaseModel):
    errors: Optional[GetRecommendationErrors] = None
    instanceRecommendations: Optional[InstanceRecommendations] = None
    nextToken: Optional[NextToken] = None


class RecommendationSummary(BaseModel):
    accountId: Optional[AccountId] = None
    currentPerformanceRiskRatings: Optional[CurrentPerformanceRiskRatings] = None
    recommendationResourceType: Optional[RecommendationSourceType] = None
    savingsOpportunity: Optional[SavingsOpportunity] = None
    summaries: Optional[Summaries] = None


class RecommendationSummaries(RootModel[List[RecommendationSummary]]):
    root: List[RecommendationSummary]


class GetRecommendationSummariesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    recommendationSummaries: Optional[RecommendationSummaries] = None
